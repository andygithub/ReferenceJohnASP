#all sections are in the same file because breaking out into seperate files had path issues
#using host for these status messages so they show up in the log by default.  change to verbose to turn down to normal level.

Write-host "Start PreTest Script $(Get-Date -Format o)";

Write-host "Start AppFrabric Section $(Get-Date -Format o)";

# start the configured appfabric instance
# need to load all the modules into the prompt before starting

Import-Module ApplicationServer
Import-Module distributedcacheconfiguration
Import-Module distributedcacheadministration

Write-Verbose "Imported AppFabric Modules"
use-cachecluster
start-cachecluster
Write-Verbose "Start cache instance"

Write-host "End AppFrabric Section $(Get-Date -Format o)";

Write-host "Start Database Init Section $(Get-Date -Format o)";
Write-host "Build Number: " + $Env:TF_BUILD_BUILDNUMBER 

#start the database initialize step
#will run the vs data project deployment.  note that there is a custom deployment configuration setup for unit tests.

$sqlexecpath = "C:\Program Files (x86)\Microsoft Visual Studio 12.0\Common7\IDE\Extensions\Microsoft\SQLDB\DAC\120\SqlPackage.exe";
$sqlGeneratedDb = "Reference_John_UnitTestRun_" + $Env:TF_BUILD_BUILDNUMBER;
$sqlGeneratedDbWithToken = "=" + $sqlGeneratedDb + ";";
$sqlexecArgs = "/a:Publish /pr:" + $Env:TF_BUILD_BINARIESDIRECTORY + "\Reference_John_UnitTestRun.publish.xml /sf:" + $Env:TF_BUILD_BINARIESDIRECTORY + "\Reference.John.Database.dacpac /tdn:" + $sqlGeneratedDb;

$ConnectionStringDBNameToReplace = "=Reference_John;";

if (!(Test-Path -path $sqlexecpath))
{
	Write-Error ("SQL exec path is not found: " + $sqlexecpath)
	exit 1
}

$ps = new-object System.Diagnostics.Process;
$pinfo = New-Object System.Diagnostics.ProcessStartInfo;
$pinfo.Filename = $sqlexecpath;
$pinfo.Arguments = $sqlexecArgs;
$pinfo.RedirectStandardOutput = $true;
$pinfo.RedirectStandardError = $true;
$pinfo.UseShellExecute = $false;
$pinfo.CreateNoWindow = $true;
$ps.StartInfo = $pinfo;
$ps.start();
[string] $OutSQLValue = $ps.StandardOutput.ReadToEnd();
$ps.WaitForExit();

Write-host $OutSQLValue;

Write-host "End Database Init Section $(Get-Date -Format o)";

Write-host "Start Configuration Customization Section $(Get-Date -Format o)";

#this section will look for various test configuration files in the binaries directory
#each configuration file will then have customized environmental changes made. 
#for example replacing the existing database name with the one just generated by the build
#most code was reused from teh applyversiontoassemblies script

Write-host "Searching Folder $Env:TF_BUILD_BINARIESDIRECTORY"
$files = gci $Env:TF_BUILD_BINARIESDIRECTORY -filter "*.Fixture.dll.config" | Select-Object FullName
if($files)
{
	Write-Verbose "Will apply customization to $($files.count) files."
	
	foreach ($file in $files) {
			
			
		if(-not $Disable)
		{
			$filecontent = Get-Content($file.FullName)
            #not putting an encoding flag on the out-file caused this error when attempting to use the config file in test run:
            #System.Configuration.ConfigurationErrorsException: '.', hexadecimal value 0x00, is an invalid character.
            #ansi is the default depending on the system and .net is expecting utf8
			$filecontent -replace $ConnectionStringDBNameToReplace, $sqlGeneratedDbWithToken  | Out-File $file.FullName -Encoding utf8
			Write-Verbose "$file.FullName - database name updated"
		}
	}
}
else
{
	Write-Warning "Found no files."
}

Write-host "End Configuration Customization Section $(Get-Date -Format o)";

Write-host "End PreTest Script $(Get-Date -Format o)";
