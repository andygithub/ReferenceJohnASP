<?xml version="1.0"?>
<doc>
<assembly>
<name>
Reference.John.Repository
</name>
</assembly>
<members>
<member name="M:Reference.John.Repository.Infrastructure.SimpleDbContextStorage.#ctor">
	<summary>
 Initializes a new instance of the <see cref="T:Reference.John.Repository.Infrastructure.SimpleDbContextStorage"/> class.
 </summary>
</member><member name="M:Reference.John.Repository.Infrastructure.SimpleDbContextStorage.GetDbContextForKey(System.String)">
	<summary>
 Returns the db context associated with the specified key or
 null if the specified key is not found.
 </summary>
	<param name="key">The key.</param>
	<returns></returns>
</member><member name="M:Reference.John.Repository.Infrastructure.SimpleDbContextStorage.SetDbContextForKey(System.String,System.Data.Entity.DbContext)">
	<summary>
 Stores the db context into a dictionary using the specified key.
 If an object context already exists by the specified key, 
 it gets overwritten by the new object context passed in.
 </summary>
	<param name="key">The key.</param>
	<param name="context">The object context.</param>
</member><member name="M:Reference.John.Repository.Infrastructure.SimpleDbContextStorage.GetAllDbContexts">
	<summary>
 Returns all the values of the internal dictionary of db contexts.
 </summary>
	<returns></returns>
</member><member name="M:Reference.John.Repository.Infrastructure.DbContextBuilder`1.BuildDbContext(System.Type)">
	<summary>
 Creates a new DbContext.  This maps back to the default generated context type.  This could be overridden with a type parameter or specifying a context on the repository. "/&gt;.
 </summary>
	<returns></returns>
</member><member name="M:Reference.John.Repository.GenericRepository.#ctor">
	<summary>
 Initializes a new instance of the <see cref="T:Reference.John.Repository.GenericRepository"/> class.
 </summary>
</member><member name="M:Reference.John.Repository.GenericRepository.#ctor(System.String)">
	<summary>
 Initializes a new instance of the <see cref="T:Reference.John.Repository.GenericRepository"/> class.
 </summary>
	<param name="connectionStringName">Name of the connection string.</param>
</member><member name="M:Reference.John.Repository.GenericRepository.#ctor(System.Data.Entity.DbContext)">
	<summary>
 Initializes a new instance of the <see cref="T:Reference.John.Repository.GenericRepository"/> class.
 </summary>
	<param name="context">The context.</param>
</member><member name="T:Reference.John.Repository.GenericRepository">
	<summary>
 Generic repository
 </summary>
</member><member name="M:Reference.John.Repository.FormContactZeroReadOnlyRepository.#ctor(System.String)">
	<summary>
 Initializes a new instance of the <see cref="T:Reference.John.Repository.GenericRepository"/> class.
 </summary>
	<param name="connectionStringName">Name of the connection string.</param>
</member><member name="M:Reference.John.Repository.Infrastructure.UnitOfWork.Dispose">
	<summary>
 Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
 </summary>
</member><member name="M:Reference.John.Repository.Infrastructure.UnitOfWork.Dispose(System.Boolean)">
	<summary>
 Disposes off the managed and unmanaged resources used.
 </summary>
	<param name="disposing"></param>
</member><member name="M:Reference.John.Repository.Infrastructure.UnitOfWork.ReleaseCurrentTransaction">
	<summary>
 Releases the current transaction
 </summary>
</member><member name="M:Reference.John.Repository.Infrastructure.IDbContextStorage.GetDbContextForKey(System.String)">
	<summary>
 Gets the db context for key.
 </summary>
	<param name="key">The key.</param>
	<returns></returns>
</member><member name="M:Reference.John.Repository.Infrastructure.IDbContextStorage.SetDbContextForKey(System.String,System.Data.Entity.DbContext)">
	<summary>
 Sets the db context for key.
 </summary>
	<param name="key">The key.</param>
	<param name="objectContext">The object context.</param>
</member><member name="M:Reference.John.Repository.Infrastructure.IDbContextStorage.GetAllDbContexts">
	<summary>
 Gets all db contexts.
 </summary>
	<returns></returns>
</member><member name="T:Reference.John.Repository.Infrastructure.IDbContextStorage">
	<summary>
 Stores object context
 </summary>
</member><member name="M:Reference.John.Repository.FormContactZeroRepository.#ctor(System.String)">
	<summary>
 Initializes a new instance of the <see cref="T:Reference.John.Repository.GenericRepository"/> class.
 </summary>
	<param name="connectionStringName">Name of the connection string.</param>
</member><member name="M:Reference.John.Repository.Infrastructure.DbContextInitializer.InitializeDbContextOnce(System.Action)">
	<summary>
 This is the method which should be given the call to intialize the DbContext; e.g.,
 DbContextInitializer.Instance().InitializeDbContextOnce(() =&gt; InitializeDbContext());
 where InitializeDbContext() is a method which calls DbContextManager.Init()
 </summary>
	<param name="initMethod"></param>
</member><member name="F:Reference.John.Repository.Infrastructure.DbContextManager.DefaultConnectionStringName">
	<summary>
 The default connection string name used if only one database is being communicated with.
 </summary>
</member><member name="P:Reference.John.Repository.Infrastructure.DbContextManager.Current">
	<summary>
 Used to get the current db context session if you're communicating with a single database.
 When communicating with multiple databases, invoke <see cref="M:Reference.John.Repository.Infrastructure.DbContextManager.CurrentFor(System.String)"/> instead.
 </summary>
</member><member name="M:Reference.John.Repository.Infrastructure.DbContextManager.CurrentFor(System.String)">
	<summary>
 Used to get the current DbContext associated with a key; i.e., the key 
 associated with an object context for a specific database.
 
 If you're only communicating with one database, you should call <see cref="P:Reference.John.Repository.Infrastructure.DbContextManager.Current"/> instead,
 although you're certainly welcome to call this if you have the key available.
 </summary>
</member><member name="M:Reference.John.Repository.Infrastructure.DbContextManager.CloseAllDbContexts">
	<summary>
 This method is used by application-specific db context storage implementations
 and unit tests. Its job is to walk thru existing cached object context(s) and Close() each one.
 </summary>
</member><member name="P:Reference.John.Repository.Infrastructure.DbContextManager._storage">
	<summary>
 An application-specific implementation of IDbContextStorage must be setup either thru
 <see cref="M:Reference.John.Repository.Infrastructure.DbContextManager.InitStorage(Reference.John.Repository.Infrastructure.IDbContextStorage)"/> or one of the <see cref="M:Reference.John.Repository.Infrastructure.DbContextManager.Init(System.Boolean)"/> overloads. 
 </summary>
</member><member name="F:Reference.John.Repository.Infrastructure.DbContextManager._dbContextBuilders">
	<summary>
 Maintains a dictionary of db context builders, one per database.  The key is a 
 connection string name used to look up the associated database, and used to decorate respective
 repositories. If only one database is being used, this dictionary contains a single
 factory with a key of <see cref="F:Reference.John.Repository.Infrastructure.DbContextManager.DefaultConnectionStringName"/>.
 </summary>
</member><member name="M:Reference.John.Repository.IRepository.GetByKey``1(System.Object)">
	<summary>
 Gets entity by key.
 </summary>
	<typeparam name="TEntity">The type of the entity.</typeparam>
	<param name="keyValue">The key value.</param>
	<returns></returns>
</member><member name="M:Reference.John.Repository.IRepository.GetQuery``1">
	<summary>
 Gets the query.
 </summary>
	<typeparam name="TEntity">The type of the entity.</typeparam>
	<returns></returns>
</member><member name="M:Reference.John.Repository.IRepository.GetQuery``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
	<summary>
 Gets the query.
 </summary>
	<typeparam name="TEntity">The type of the entity.</typeparam>
	<param name="predicate">The predicate.</param>
	<returns></returns>
</member><member name="M:Reference.John.Repository.IRepository.Single``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
	<summary>
 Gets one entity based on matching criteria
 </summary>
	<typeparam name="TEntity">The type of the entity.</typeparam>
	<param name="criteria">The criteria.</param>
	<returns></returns>
</member><member name="M:Reference.John.Repository.IRepository.First``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
	<summary>
 Firsts the specified predicate.
 </summary>
	<typeparam name="TEntity">The type of the entity.</typeparam>
	<param name="predicate">The predicate.</param>
	<returns></returns>
</member><member name="M:Reference.John.Repository.IRepository.Add``1(``0)">
	<summary>
 Adds the specified entity.
 </summary>
	<typeparam name="TEntity">The type of the entity.</typeparam>
	<param name="entity">The entity.</param>
</member><member name="M:Reference.John.Repository.IRepository.Attach``1(``0)">
	<summary>
 Attaches the specified entity.
 </summary>
	<typeparam name="TEntity">The type of the entity.</typeparam>
	<param name="entity">The entity.</param>
</member><member name="M:Reference.John.Repository.IRepository.Delete``1(``0)">
	<summary>
 Deletes the specified entity.
 </summary>
	<typeparam name="TEntity">The type of the entity.</typeparam>
	<param name="entity">The entity.</param>
</member><member name="M:Reference.John.Repository.IRepository.Delete``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
	<summary>
 Deletes one or many entities matching the specified criteria
 </summary>
	<typeparam name="TEntity">The type of the entity.</typeparam>
	<param name="criteria">The criteria.</param>
</member><member name="M:Reference.John.Repository.IRepository.Update``1(``0)">
	<summary>
 Updates changes of the existing entity. 
 The caller must later call SaveChanges() on the repository explicitly to save the entity to database
 </summary>
	<typeparam name="TEntity">The type of the entity.</typeparam>
	<param name="entity">The entity.</param>
</member><member name="M:Reference.John.Repository.IRepository.Find``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
	<summary>
 Finds entities based on provided criteria.
 </summary>
	<typeparam name="TEntity">The type of the entity.</typeparam>
	<param name="criteria">The criteria.</param>
	<returns></returns>
</member><member name="M:Reference.John.Repository.IRepository.FindOne``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
	<summary>
 Finds one entity based on provided criteria.
 </summary>
	<typeparam name="TEntity">The type of the entity.</typeparam>
	<param name="criteria">The criteria.</param>
	<returns></returns>
</member><member name="M:Reference.John.Repository.IRepository.GetAll``1">
	<summary>
 Gets all.
 </summary>
	<typeparam name="TEntity">The type of the entity.</typeparam>
	<returns></returns>
</member><member name="M:Reference.John.Repository.IRepository.Get``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Int32,System.Int32,Reference.John.Repository.SortOrder)">
	<summary>
 Gets the specified order by.
 </summary>
	<typeparam name="TEntity">The type of the entity.</typeparam>
	<typeparam name="TOrderBy">The type of the order by.</typeparam>
	<param name="orderBy">The order by.</param>
	<param name="pageIndex">Index of the page.</param>
	<param name="pageSize">Size of the page.</param>
	<param name="sortOrder">The sort order.</param>
	<returns></returns>
</member><member name="M:Reference.John.Repository.IRepository.Get``2(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Int32,System.Int32,Reference.John.Repository.SortOrder)">
	<summary>
 Gets the specified criteria.
 </summary>
	<typeparam name="TEntity">The type of the entity.</typeparam>
	<typeparam name="TOrderBy">The type of the order by.</typeparam>
	<param name="criteria">The criteria.</param>
	<param name="orderBy">The order by.</param>
	<param name="pageIndex">Index of the page.</param>
	<param name="pageSize">Size of the page.</param>
	<param name="sortOrder">The sort order.</param>
	<returns></returns>
</member><member name="M:Reference.John.Repository.IRepository.Count``1">
	<summary>
 Counts the specified entities.
 </summary>
	<typeparam name="TEntity">The type of the entity.</typeparam>
	<returns></returns>
</member><member name="M:Reference.John.Repository.IRepository.Count``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
	<summary>
 Counts entities with the specified criteria.
 </summary>
	<typeparam name="TEntity">The type of the entity.</typeparam>
	<param name="criteria">The criteria.</param>
	<returns></returns>
</member><member name="P:Reference.John.Repository.IRepository.UnitOfWork">
	<summary>
 Gets the unit of work.
 </summary>
	<value>The unit of work.</value>
</member>
</members>
</doc>