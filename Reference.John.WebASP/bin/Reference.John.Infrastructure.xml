<?xml version="1.0"?>
<doc>
<assembly>
<name>
Reference.John.Infrastructure
</name>
</assembly>
<members>
<member name="M:Reference.John.Infrastructure.Cache.CacheCommand.#ctor(Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation)">
	<summary>
 Constructor that will take the IMethodInvocation and map it into properties.
 </summary>
	<param name="input"></param>
	<remarks></remarks>
</member><member name="P:Reference.John.Infrastructure.Cache.CacheCommand.FullMethodName">
	<summary>
 Full type method name of the executing name.  This value is used when looking up a configured command definition.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Reference.John.Infrastructure.Cache.CacheCommand.Parameters">
	<summary>
 Set of parameters that have been passed to the command.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Reference.John.Infrastructure.Cache.CacheCommand.GetCacheKey">
	<summary>
 Takes the existing property values and builds a cache key.  THe parameter values will be included as well.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Reference.John.Infrastructure.Cache.CacheCommand">
	<summary>
 Class that will contain the informaton about the currently executing method command. 
 </summary>
	<remarks></remarks>
</member><member name="P:Reference.John.Infrastructure.Cache.ICachingPolicy.CacheableCommands">
	<summary>
 Gets the collection of cacheable commands.
 </summary>
	<value>The cacheable tables.</value>
</member><member name="M:Reference.John.Infrastructure.Cache.ICachingPolicy.CanBeCached(Reference.John.Infrastructure.Cache.CacheCommand)">
	<summary>
 Determines whether the specified command definition can be cached.
 </summary>
	<param name="cachingCommand">The command definition.</param>
	<returns>
 A value of <c>true</c> if the specified command definition can be cached; otherwise, <c>false</c>.
 </returns>
</member><member name="M:Reference.John.Infrastructure.Cache.ICachingPolicy.IsCacheReset(Reference.John.Infrastructure.Cache.CacheCommand)">
	<summary>
 Determines whether the specified command definition will cause the cache to be cleared.
 </summary>
	<param name="cachingCommand">The command definition.</param>
	<returns>
 A value of <c>true</c> if the specified command definition can be will cause the cache to be cleared; otherwise, <c>false</c>.
 </returns>
</member><member name="M:Reference.John.Infrastructure.Cache.ICachingPolicy.GetCommandDefinition(Reference.John.Infrastructure.Cache.CacheCommand)">
	<summary>
 Returns the command defintion based on the cache command parameter.
 </summary>
	<param name="cachingCommand"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Reference.John.Infrastructure.Cache.ICachingPolicy">
	<summary>
 Caching policy.
 </summary>
</member><member name="M:Reference.John.Infrastructure.Cache.AppFabricCache.#ctor">
	<summary>
 Default constructor that will load the endpoint information from a default config name.
 </summary>
	<remarks>The default cache is used.</remarks>
</member><member name="M:Reference.John.Infrastructure.Cache.AppFabricCache.#ctor(System.String,System.String)">
	<summary>
 Constructor that will create an endpoint from the passed parameters.
 </summary>
	<param name="endPoint"></param>
	<param name="portNumber"></param>
	<remarks>The default cache is used.</remarks>
</member><member name="M:Reference.John.Infrastructure.Cache.AppFabricCache.#ctor(System.String,System.String,System.String)">
	<summary>
 Constructor that will create an endpoint from the passed parameters.
 </summary>
	<param name="endPoint"></param>
	<param name="portNumber"></param>
	<param name="cacheName"></param>
	<remarks>The cache name connected to is based on teh cache name parameter.</remarks>
</member><member name="M:Reference.John.Infrastructure.Cache.AppFabricCache.#ctor(Microsoft.ApplicationServer.Caching.DataCache)">
	<summary>
 Constructor that takes an already initialized data cache instance.
 </summary>
	<param name="cache"></param>
	<remarks></remarks>
</member><member name="M:Reference.John.Infrastructure.Cache.AppFabricCache.GetItem(System.String,System.Object@)">
	<summary>
	</summary>
	<param name="key"></param>
	<param name="value"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Reference.John.Infrastructure.Cache.AppFabricCache.PutItem(System.String,System.Object,System.Collections.Generic.IEnumerable{System.String},System.TimeSpan,System.DateTime)">
	<summary>
 Method to put an item into cache.
 </summary>
	<param name="key"></param>
	<param name="value"></param>
	<param name="dependentEntitySets"></param>
	<param name="slidingExpiration"></param>
	<param name="absoluteExpiration"></param>
	<remarks></remarks>
</member><member name="M:Reference.John.Infrastructure.Cache.AppFabricCache.InvalidateSets(System.Collections.Generic.IEnumerable{System.String})">
	<summary>
 Method to remove all entries from a region.  The region is determined by the list of strings passed.
 </summary>
	<param name="entitySets"></param>
	<remarks></remarks>
</member><member name="M:Reference.John.Infrastructure.Cache.AppFabricCache.InvalidateItem(System.String)">
	<summary>
 Method to remove a specific key from the cache.  This will also related tags.
 </summary>
	<param name="key"></param>
	<remarks></remarks>
</member><member name="M:Reference.John.Infrastructure.Cache.AppFabricCache.CreateRegionIfNeeded(System.String)">
	<summary>
 Method to create a region if it doesn't exist.
 </summary>
	<param name="regionName"></param>
	<remarks></remarks>
</member><member name="T:Reference.John.Infrastructure.Cache.AppFabricCache">
	<summary>
 Cache provider implementation that is for appfabric.
 </summary>
	<remarks></remarks>
</member><member name="M:Reference.John.Infrastructure.Cache.FrameworkCache.#ctor">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Reference.John.Infrastructure.Cache.FrameworkCache.#ctor(System.Runtime.Caching.ObjectCache)">
	<summary>
 Constructor that takes an already initialized data cache instance.
 </summary>
	<param name="cache"></param>
	<remarks></remarks>
</member><member name="M:Reference.John.Infrastructure.Cache.FrameworkCache.GetItem(System.String,System.Object@)">
	<summary>
	</summary>
	<param name="key"></param>
	<param name="value"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Reference.John.Infrastructure.Cache.FrameworkCache.InvalidateItem(System.String)">
	<summary>
 Remove an item from the cache.
 </summary>
	<param name="key"></param>
	<remarks></remarks>
</member><member name="M:Reference.John.Infrastructure.Cache.FrameworkCache.InvalidateSets(System.Collections.Generic.IEnumerable{System.String})">
	<summary>
 Remove a set of items from the cache.
 </summary>
	<param name="entitySets"></param>
	<remarks></remarks>
</member><member name="M:Reference.John.Infrastructure.Cache.FrameworkCache.PutItem(System.String,System.Object,System.Collections.Generic.IEnumerable{System.String},System.TimeSpan,System.DateTime)">
	<summary>
 Method to put an item into cache.
 </summary>
	<param name="key"></param>
	<param name="value"></param>
	<param name="dependentEntitySets"></param>
	<param name="slidingExpiration"></param>
	<param name="absoluteExpiration"></param>
	<remarks></remarks>
</member><member name="T:Reference.John.Infrastructure.Cache.FrameworkCache">
	<summary>
 Cache implementation that wraps the .net framework cache implementation.
 </summary>
</member><member name="P:Reference.John.Infrastructure.Cache.ICacheProviderConfiguration.IsCachingEnabled">
	<summary>
 Flag to determine if caching is enabled.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Reference.John.Infrastructure.Cache.ICacheProviderConfiguration.DefaultCache">
	<summary>
 Cache implementation that is used to get items from cache and put items in cache.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Reference.John.Infrastructure.Cache.ICacheProviderConfiguration.DefaultCachingPolicy">
	<summary>
 Instance of the caching policy that is configured.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Reference.John.Infrastructure.Cache.ICacheProviderConfiguration">
	<summary>
 Interface that is a container for all caching settings and the cache provider implementation.
 </summary>
	<remarks></remarks>
</member><member name="M:Reference.John.Infrastructure.Cache.InMemoryCache.#ctor">
	<summary>
 Initializes a new instance of the InMemoryCache class.
 </summary>
</member><member name="M:Reference.John.Infrastructure.Cache.InMemoryCache.#ctor(System.Int32)">
	<summary>
 Initializes a new instance of the InMemoryCache class.
 </summary>
	<param name="maxItems">The maximum number of items which can be stored in the cache.</param>
</member><member name="P:Reference.John.Infrastructure.Cache.InMemoryCache.CacheHits">
	<summary>
 Gets the number of cache hits.
 </summary>
	<value>The number of cache hits.</value>
</member><member name="P:Reference.John.Infrastructure.Cache.InMemoryCache.CacheMisses">
	<summary>
 Gets the number of cache misses.
 </summary>
	<value>The number of cache misses.</value>
</member><member name="P:Reference.John.Infrastructure.Cache.InMemoryCache.CacheItemAdds">
	<summary>
 Gets the number of cache adds.
 </summary>
	<value>The number of cache adds.</value>
</member><member name="P:Reference.John.Infrastructure.Cache.InMemoryCache.CacheItemInvalidations">
	<summary>
 Gets the number of cache item invalidations.
 </summary>
	<value>The number of cache item invalidations.</value>
</member><member name="P:Reference.John.Infrastructure.Cache.InMemoryCache.MaxItems">
	<summary>
 Gets the maximum number of items the cache can hold.
 </summary>
	<value>The maximum number of items the cache can hold.</value>
</member><member name="P:Reference.John.Infrastructure.Cache.InMemoryCache.Count">
	<summary>
 Gets the number of items in the cache.
 </summary>
	<value>The number of items in the cache.</value>
</member><member name="M:Reference.John.Infrastructure.Cache.InMemoryCache.GetItem(System.String,System.Object@)">
	<summary>
 Tries to the get entry by key.
 </summary>
	<param name="key">The cache key.</param>
	<param name="value">The retrieved value.</param>
	<returns>
 A value of <c>true</c> if entry was found in the cache, <c>false</c> otherwise.
 </returns>
</member><member name="M:Reference.John.Infrastructure.Cache.InMemoryCache.PutItem(System.String,System.Object,System.Collections.Generic.IEnumerable{System.String},System.TimeSpan,System.DateTime)">
	<summary>
 Adds the specified entry to the cache.
 </summary>
	<param name="key">The entry key.</param>
	<param name="value">The entry value.</param>
	<param name="dependentEntitySets">The list of dependent entity sets.</param>
	<param name="slidingExpiration">The sliding expiration.</param>
	<param name="absoluteExpiration">The absolute expiration.</param>
</member><member name="M:Reference.John.Infrastructure.Cache.InMemoryCache.InvalidateSets(System.Collections.Generic.IEnumerable{System.String})">
	<summary>
 Invalidates all cache entries which are dependent on any of the specified entity sets.
 </summary>
	<param name="entitySets">The entity sets.</param>
</member><member name="M:Reference.John.Infrastructure.Cache.InMemoryCache.InvalidateItem(System.String)">
	<summary>
 Invalidates cache entry with a given key.
 </summary>
	<param name="key">The cache key.</param>
</member><member name="M:Reference.John.Infrastructure.Cache.InMemoryCache.Dispose">
	<summary>
 Releases unmanaged resources.
 </summary>
</member><member name="M:Reference.John.Infrastructure.Cache.InMemoryCache.CacheEntry.Equals(System.Object)">
	<summary>
 Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
 </summary>
	<param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
	<returns>
 A value of <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
 </returns>
	<exception cref="T:System.NullReferenceException">
 The <paramref name="obj"/> parameter is null.
 </exception>
</member><member name="M:Reference.John.Infrastructure.Cache.InMemoryCache.CacheEntry.Equals(Reference.John.Infrastructure.Cache.InMemoryCache.CacheEntry)">
	<summary>
 Determines whether the specified <see cref="T:Reference.John.Infrastructure.Cache.InMemoryCache.CacheEntry"/> is equal to this instance.
 </summary>
	<param name="other">The other cache entry.</param>
	<returns>
 A value of <c>true</c> if the specified cache entry is equal to this instance; otherwise, <c>false</c>.
 </returns>
</member><member name="M:Reference.John.Infrastructure.Cache.InMemoryCache.CacheEntry.GetHashCode">
	<summary>
 Returns a hash code for this instance.
 </summary>
	<returns>
 A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
 </returns>
</member><member name="T:Reference.John.Infrastructure.Cache.InMemoryCache.CacheEntry">
	<summary>
 Cache entry.
 </summary>
</member><member name="T:Reference.John.Infrastructure.Cache.InMemoryCache">
	<summary>
 Simple cache implementation. Not very efficient, uses simple LRU strategy.
 </summary>
</member><member name="M:Reference.John.Infrastructure.Cache.ICache.GetItem(System.String,System.Object@)">
	<summary>
 Tries to the get cached entry by key.
 </summary>
	<param name="key">The cache key.</param>
	<param name="value">The retrieved value.</param>
	<returns>A value of <c>true</c> if entry was found in the cache, <c>false</c> otherwise.</returns>
</member><member name="M:Reference.John.Infrastructure.Cache.ICache.PutItem(System.String,System.Object,System.Collections.Generic.IEnumerable{System.String},System.TimeSpan,System.DateTime)">
	<summary>
 Adds the specified entry to the cache.
 </summary>
	<param name="key">The entry key.</param>
	<param name="value">The entry value.</param>
	<param name="dependentEntitySets">The list of dependent entity sets.</param>
	<param name="slidingExpiration">The sliding expiration.</param>
	<param name="absoluteExpiration">The absolute expiration.</param>
</member><member name="M:Reference.John.Infrastructure.Cache.ICache.InvalidateSets(System.Collections.Generic.IEnumerable{System.String})">
	<summary>
 Invalidates all cache entries which are dependent on any of the specified entity sets.
 </summary>
	<param name="entitySets">The entity sets.</param>
</member><member name="M:Reference.John.Infrastructure.Cache.ICache.InvalidateItem(System.String)">
	<summary>
 Invalidates cache entry with a given key.
 </summary>
	<param name="key">The cache key.</param>
</member><member name="T:Reference.John.Infrastructure.Cache.ICache">
	<summary>
 Interface to be implemented by cache implementations.
 </summary>
</member><member name="M:Reference.John.Infrastructure.Cache.CacheCommandDefinition.#ctor">
	<summary>
 Default constructor that sets the properties to default values.
 </summary>
	<remarks></remarks>
</member><member name="P:Reference.John.Infrastructure.Cache.CacheCommandDefinition.EntityName">
	<summary>
 Logical entity name for the command.  This should be unique and it will be reused in the dependent entites list.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Reference.John.Infrastructure.Cache.CacheCommandDefinition.CacheMethodName">
	<summary>
 The list of full qualied method names that should be cached and are part of the same logical entity name.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Reference.John.Infrastructure.Cache.CacheCommandDefinition.CacheResetMethodName">
	<summary>
 The list of full qualied method names that should cause the cache to be cleared and are part of the same logical entity name.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Reference.John.Infrastructure.Cache.CacheCommandDefinition.DependentEntities">
	<summary>
 The list of dependent entities on this logical entity.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Reference.John.Infrastructure.Cache.CacheCommandDefinition.SlidingExpiration">
	<summary>
 The sliding expiration for items cached in this logical entity name.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Reference.John.Infrastructure.Cache.CacheCommandDefinition.AbsoluteExpiration">
	<summary>
 The absolute expiration for items cached in this logical entity name.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Reference.John.Infrastructure.Cache.CacheCommandDefinition.MinCacheableRows">
	<summary>
 Gets or sets the minimal number of cacheable rows.
 </summary>
	<value>Minimal number of cacheable rows.</value>
</member><member name="P:Reference.John.Infrastructure.Cache.CacheCommandDefinition.MaxCacheableRows">
	<summary>
 Gets or sets the maximum number of cacheable rows.
 </summary>
	<value>Maximum number of cacheable rows.</value>
</member><member name="T:Reference.John.Infrastructure.Cache.CacheCommandDefinition">
	<summary>
 Class that will contain settings about a command.
 </summary>
	<remarks></remarks>
</member><member name="P:Reference.John.Infrastructure.Cache.CacheProviderConfiguration.IsCachingEnabled">
	<summary>
 Flag to determine if caching is enabled.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Reference.John.Infrastructure.Cache.CacheProviderConfiguration.DefaultCache">
	<summary>
 Cache implementation that is used to get items from cache and put items in cache.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Reference.John.Infrastructure.Cache.CacheProviderConfiguration.DefaultCachingPolicy">
	<summary>
 Instance of the caching policy that is configured.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Reference.John.Infrastructure.Cache.CacheProviderConfiguration">
	<summary>
 Class that is a container for all caching settings and the cache provider implementation.
 </summary>
	<remarks></remarks>
</member><member name="M:Reference.John.Infrastructure.Cache.CacheProviderConfigurationFactory.Create">
	<summary>
 Factory to initialize the cache provider configuration.  The factory is setup to use configuation file values but if the configuration is not present then defaults will be defined.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Reference.John.Infrastructure.Cache.CacheProviderConfigurationFactory.LoadCommandDefinitions(System.String)">
	<summary>
 Static function that will deserialize all of the command definitions from the specified file.  
 </summary>
	<param name="file"></param>
	<returns></returns>
	<remarks>If the file is null or doesn't exist than the default command defintion will be used.  No exception is thrown in that instance.</remarks>
</member><member name="M:Reference.John.Infrastructure.Cache.CacheProviderConfigurationFactory.LoadCommandDefinitions">
	<summary>
 Static function that will load all of the local embedded command definitions.  This is the default set that is used when an external file is not specified in the configuration file.
 </summary>
	<returns></returns>
	<remarks>This is the default set that is used when an external file is not specified in the configuration file.</remarks>
</member><member name="T:Reference.John.Infrastructure.Cache.CacheProviderConfigurationFactory">
	<summary>
 Factory class that will handle instantiating the ICacheProviderConfiguration contract.
 </summary>
	<remarks></remarks>
</member><member name="M:Reference.John.Infrastructure.Cache.CommandCachingPolicy.#ctor">
	<summary>
 Initializes a new instance of the CustomCachingPolicy class.
 </summary>
</member><member name="P:Reference.John.Infrastructure.Cache.CommandCachingPolicy.CacheableCommands">
	<summary>
 Gets the collection of cacheable commands.
 </summary>
	<value>The cacheable tables.</value>
</member><member name="M:Reference.John.Infrastructure.Cache.CommandCachingPolicy.CanBeCached(Reference.John.Infrastructure.Cache.CacheCommand)">
	<summary>
 Determines whether the specified command definition can be cached.
 </summary>
	<param name="command">The command definition.</param>
	<returns>
 A value of <c>true</c> if the specified command definition can be cached; otherwise, <c>false</c>.
 </returns>
</member><member name="M:Reference.John.Infrastructure.Cache.CommandCachingPolicy.GetCommandDefinition(Reference.John.Infrastructure.Cache.CacheCommand)">
	<summary>
 Returns the command defintion based on the cache command parameter.
 </summary>
	<param name="cachingCommand"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Reference.John.Infrastructure.Cache.CommandCachingPolicy.IsCacheReset(Reference.John.Infrastructure.Cache.CacheCommand)">
	<summary>
 Determines whether the specified command definition will cause the cache to be cleared.
 </summary>
	<param name="cachingCommand">The command definition.</param>
	<returns>
 A value of <c>true</c> if the specified command definition can be will cause the cache to be cleared; otherwise, <c>false</c>.
 </returns>
</member><member name="T:Reference.John.Infrastructure.Cache.CommandCachingPolicy">
	<summary>
 Custom caching policy on per-command basis.
 </summary>
</member>
</members>
</doc>